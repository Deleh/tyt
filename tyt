#!/usr/bin/env bash

# Text formatting variables
text_bold="\e[1m"
text_red="\e[31m"
text_reset="\e[0m"
text_yellow="\e[33m"

function print_usage {
    cat <<EOF
Usage: tyt [OPTIONS] QUERIES ... [OPTIONS]

Play YouTube videos from the command line in a convenient way.

OPTIONS
  -h,  --help         Show this help message
  -a*, --alternative  Play an alternative video (e.g. -aaa for third
                      alternative)
  -d,  --download     Download video (or audio if -m is provided) to the current
                      directory
  -i,  --interactive  Interactive mode (overrides --alternative)
  -m,  --music        Play only the audio track

EXAMPLES
  tyt Elephants Dream                    # Search for 'Elephants Dream' and play
                                         # the video
  tyt -m The Beatles - Yellow Submarine  # Search for 'The Beatles - Yellow
                                         # Submarine' and play only the music
  tyt -i -s Elephants Dream              # Search for 'Elephants Dream'
                                         # interactively and download the
                                         # selected video
EOF
    exit
}

function print_logo {
    if [ "$music" == true ]
    then
        echo -ne "\n      ${text_bold}\ /${text_reset}     ♫\n"
        echo -ne "    ${text_bold}=======${text_reset} ♫\n"
        echo -ne "    ${text_bold}| ${text_red}tyt${text_reset} ${text_bold}|${text_reset}\n"
        echo -ne "    ${text_bold}=======${text_reset}\n\n"
    else
        echo -ne "\n      ${text_bold}\ /${text_reset}\n"
        echo -ne "    ${text_bold}=======${text_reset}\n"
        echo -ne "    ${text_bold}| ${text_red}tyt${text_reset} ${text_bold}|${text_reset}\n"
        echo -ne "    ${text_bold}=======${text_reset}\n\n"
    fi
}

function print_controls {
    echo -e "[${text_bold}p${text_reset}] Play/Pause, [${text_bold}←${text_reset}/${text_bold}→${text_reset}] Fast-Backward/-Forward, [${text_bold}q${text_reset}] Stop"
}

function error {
    echo -ne "${text_bold}ERROR${text_reset} $1\n" >&2
    exit 1
}

function play {
    print_controls
    if [ "$music" == true ]
    then
        mpv --no-video --msg-level=all=no,statusline=status --term-status-msg="\${time-pos}/\${duration} - ${text_bold}${2//\\/\\\\}${text_reset} (${text_yellow}${text_bold}${3//\\/\\\\}${text_reset})" "$1"
    else
        mpv --msg-level=all=no,statusline=status --term-status-msg="\${time-pos}/\${duration} - ${text_bold}${2//\\/\\\\}${text_reset} (${text_yellow}${text_bold}${3//\\/\\\\}${text_reset})" "$1"
    fi
}

function download {
    echo -ne "Downloading: ${text_bold}$2${text_reset} (${text_yellow}${text_bold}$3${text_reset})\n"
    if [ "$music" == true ]
    then
        youtube-dl -x -o "%(title)s.%(ext)s" "$1" &> /dev/null
    else
        youtube-dl -o "%(title)s.%(ext)s" "$1" &> /dev/null
    fi
}

# Set default values
alternative=1
download=false
interactive=false
music=false
query=""

# Parse arguments
while (( "$#" )); do
    case "$1" in
        -a*)
            alternative="${#1}"
            shift
            ;;
        --alternative)
            alternative=2
            shift
            ;;
        -d|--download)
            download=true
            shift
            ;;
        -h|--help)
            print_usage
            ;;
        -i|--interactive)
            interactive=true
            shift
            ;;
        -m|--music)
            music=true
            shift
            ;;
        -)
            query="$query $1"
            shift
            ;;
        -*|--*=)
            error "Unsupported flag: $1"
            ;;
        *)
            query="$query $1"
            shift
            ;;
    esac
done

# Check dependencies
if ! command -v jq &> /dev/null
then
    error "jq was not found, please install it"
elif ! command -v mpv &> /dev/null
then
    error -ne "mpv was not found, please install it"
elif ! command -v youtube-dl &> /dev/null
then
    error "youtube-dl was not found, please install it"
fi

# Handle empty query
if [ "$query" == "" ]
then
    print_usage
fi

print_logo
echo -ne "Searching for: $text_bold${query:1}$text_reset\n"

# Set number of videos
if [ "$interactive" == true ]
then
  n=10
else
  n="$alternative"
fi

# Get results
results=$(youtube-dl --default-search "ytsearch" -j "ytsearch$n:${query:1}")
urls=$(echo $results | jq '.webpage_url' | tr -d '"')
titles=$(echo $results | jq '.fulltitle' | tr -d '"')
uploaders=$(echo $results | jq '.uploader' | tr -d '"')

# Create arrays
OLDIFS=$IFS
IFS=$'\n'
urls=($urls)
titles=($titles)
uploaders=($uploaders)
IFS=$OLDIFS

if [ "${#urls[@]}" == 0 ]
then
    error "No results, try again"
fi

# Select video
if [ "$interactive" = true ]
then
    echo ""
    selections=(0 1 2 3 4 5 6 7 8 9 q)
    for i in "${selections[@]}"
    do
        if [ "$i" != "q" ]
        then
            echo -e "  ${text_bold}$i${text_reset}: ${titles[$i]} (${text_yellow}${text_bold}${uploaders[$i]}${text_reset})"
        fi
    done
    echo -e "  ${text_bold}q${text_reset}: Quit\n"
    echo -ne "Selection: "
    read -n1 selection
    echo
    while [[ ! "${selections[@]}" =~ "${selection}" ]]
    do
        echo -ne "Not valid, try again: "
        read -n1 selection
        echo
    done
    if [ "$selection" == "q" ]
    then
        echo
        exit
    fi
    echo
    url=${urls[$selection]}
    title=${titles[$selection]}
    uploader=${uploaders[$selection]}
else
    url=${urls[$((alternative-1))]}
    title=${titles[$((alternative-1))]}
    uploader=${uploaders[$((alternative-1))]}
fi

# Download or play video
if [ "$download" = true ]
then
    download "$url" "$title" "$uploader"
else
    play "$url" "$title" "$uploader"
fi
if [ "$interactive" == true ]
then
    while :
    do
        echo -ne "\nSelect another or enter [${text_bold}q${text_reset}] to quit: "
        read -n1 selection
        echo
        while [[ ! "${selections[@]}" =~ "${selection}" ]]
        do
            echo -ne "Not valid, try again: "
            read -n1 selection
            echo
        done
        if [ "$selection" != "q" ]
        then
            echo
            url=${urls[$selection]}
            title=${titles[$selection]}
            uploader=${uploaders[$selection]}
            if [ "$download" == true ]
            then
                download "$url" "$title" "$uploader"
            else
                play "$url" "$title" "$uploader"
            fi
        else
            echo
            exit
        fi
    done
fi
