#!/usr/bin/env bash
missing_dependencies=false
if ! command -v jq &> /dev/null
then
  echo -ne "\e[1mjq\e[0m was not found, please install it\n"
  missing_dependencies=true
fi
if ! command -v mpv &> /dev/null
then
  echo -ne "\e[1mmpv\e[0m was not found, please install it\n"
  missing_dependencies=true
fi
if ! command -v youtube-dl &> /dev/null
then
  echo -ne "\e[1myoutube-dl\e[0m was not found, please install it\n"
  missing_dependencies=true
fi
if [ "$missing_dependencies" = true ]
then
  exit 1
fi

function print_usage {
  echo "tyt [ (-a* | --alternative) | (-i | --interactive) | (-m | --music) ] \"QUERY\""
}

alternative=0
format="flac"
interactive=false
music=false
help=false

for arg in "$@"
do
  case $arg in
    -a*)
      alternative="${arg:1}"
      alternative="${#alternative}"
      shift
      ;;
    --alternative)
      alternative=1
      shift
      ;;
    -i|--interactive)
      interactive=true
      shift
      ;;
    -m|--music)
      music=true
      shift
      ;;
    -h|--help)
      help=true
      shift
      ;;
    *)
      other_arguments+=("$1")
      shift
      ;;
  esac
done

if [ "$help" = true ]
then
  print_usage
  exit 0
fi

if [ "${#other_arguments[@]}" != "1" ]
then
  print_usage
  exit 1
fi

query="${other_arguments[0]}"

if [ "$music" = false ]
then
  echo -ne "\n      \e[1m\ /\e[0m\n"
  echo -ne "    \e[1m=======\e[0m\n"
  echo -ne "    \e[1m| \e[31mtyt\e[0m \e[1m|\e[0m\n"
  echo -ne "    \e[1m=======\e[0m\n\n"
else
  echo -ne "\n      \e[1m\ /\e[0m     ♫\n"
  echo -ne "    \e[1m=======\e[0m ♫\n"
  echo -ne "    \e[1m| \e[31mtyt\e[0m \e[1m|\e[0m\n"
  echo -ne "    \e[1m=======\e[0m\n\n"
fi

i=0

if [ "$interactive" = true ]
then
  n=10
else
  n=$((alternative+1))
fi

echo -ne "Searching for: \e[34m\e[1m$query\e[0m    \r"

until results=$(youtube-dl --default-search "ytsearch" -j "ytsearch$n:$query") &> /dev/null
do

  case $i in
    0)
  appendix="   "
  ;;
    1)
  appendix=".  "
  ;;
    2)
  appendix=".. "
  ;;
    *)
  appendix="..."
  ;;
  esac

  echo -ne "Searching for: \e[34m\e[1m$query\e[0m $appendix\r"

  i=$(((i + 1) % 4))
  sleep 1

done

echo -ne "Searching for: \e[34m\e[1m$query\e[0m    \n"

urls=$(echo $results | jq '.webpage_url' | tr -d '"')
titles=$(echo $results | jq '.fulltitle' | tr -d '"')
uploaders=$(echo $results | jq '.uploader' | tr -d '"')

OLDIFS=$IFS
IFS=$'\n'
urls=($urls)
titles=($titles)
uploaders=($uploaders)
IFS=$OLDIFS

if [ "$interactive" = true ]
then
  echo ""
  selections=(0 1 2 3 4 5 6 7 8 9)
  for i in ${selections[@]}
  do
    echo -ne "  \e[1m$i\e[0m: ${titles[$i]} (\e[33m\e[1m${uploaders[$i]}\e[0m)\n"
  done
  echo -ne "\nSelection: "
  read selection
  while [[ ! "${selections[@]}" =~ "${selection}" ]]
  do
    echo -ne "Not valid, try again: "
    read selection
  done
  echo ""
  url=${urls[$selection]}
  title=${titles[$selection]}
  uploader=${uploaders[$selection]}
else
  url=${urls[$alternative]}
  title=${titles[$alternative]}
  uploader=${uploaders[$alternative]}
fi

function play {
  echo -ne "Playing: \e[32m\e[1m$2\e[0m (\e[33m\e[1m$3\e[0m)\n"
  if [ "$music" = true ]
  then
    mpv --no-video $1 &> /dev/null
  else
    mpv $1 &> /dev/null
  fi
}

play "$url" "$title" "$uploader"

if [ "$interactive" = true ]
then
  quit=false
  selections=(0 1 2 3 4 5 6 7 8 9 q)
  while [ ! "$quit" = true ]
  do
    echo -ne "\nSelect another or press [q] to quit: "
    read selection
    while [[ ! "${selections[@]}" =~ "${selection}" ]]
    do
      echo -ne "Not valid, try again: "
      read selection
    done
    if [ ! "$selection" = "q" ]
    then
      echo ""
      url=${urls[$selection]}
      title=${titles[$selection]}
      uploader=${uploaders[$selection]}
      play "$url" "$title" "$uploader"
    else
      quit=true
    fi
  done
fi
